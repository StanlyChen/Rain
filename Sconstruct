import os
import subprocess
from pathlib import Path
import platform
import json

templateConfifFile = "machines/{0}.json".format("template_config")
localConfigFile = "machines/{0}.json".format(platform.node())
if not os.path.exists(localConfigFile):
	Execute(  Copy(localConfigFile, templateConfifFile) )

configs = dict()
with open(localConfigFile,"r") as inputfile:
 configs = json.load( inputfile )

if not configs.get("QT_DIR"):
	print("Edit the configfile: "+ localConfigFile)
	Exit(-1)



#================================
def moc_builder(target, source, env):
	command_template= "{QT_DIR}/bin/moc.exe {SOURCE} -o {TARGET}{INCLUDE}{MACROS}"
	QT_DIR =  env["QT_DIR"]
	QTGEN =  env['QTGEN']
	params = { 'SOURCE' : str(source[0]), 'TARGET' : str(target[0]) }
	params['QT_DIR'] = QT_DIR
	includes = [""]
	includes.append(QTGEN)
	includes.append(".")
	includes.append(os.path.join(QT_DIR,"include"))
	includes.append(os.path.join(QT_DIR,"include","QtCore"))
	includes.append(os.path.join(QT_DIR,"include","QtGui"))
	includes.append(os.path.join(QT_DIR,"include","QtANGLE"))
	includes.append(os.path.join(QT_DIR,"include","QtOpenGL"))
	includes.append(os.path.join(QT_DIR,"include","QtWidgets"))
	params['INCLUDE'] = " -I".join(includes)

	macros=["UNICODE","_UNICODE","WIN32","WIN64","QT_DLL","QT_CORE_LIB","QT_GUI_LIB","QT_OPENGL_LIB","QT_WIDETS_LIB"]
	params['MACROS'] = ' -D'.join(macros)
	command = command_template.format(**params)
	proc =  subprocess.Popen(command , shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
	out,err = proc.communicate()
	if err:
		print(out)
	return proc.returncode

def ui_builder( target, source, env):
	command_template= "{QT_DIR}/bin/uic.exe {SOURCE} -o {TARGET}"
	params = { 'SOURCE' : str(source[0]), 'TARGET' : str(target[0]) }
	params['QT_DIR'] = env["QT_DIR"]
	command = command_template.format(**params)
	proc =  subprocess.Popen(command , shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
	out,err = proc.communicate()
	if err:
		print(out)
	return proc.returncode

def rcc_builder( target, source, env):
	command_template= "{QT_DIR}/bin/rcc.exe {SOURCE} -o {TARGET} --name {NAME}"
	params = { 'SOURCE' : str(source[0]), 'TARGET' : str(target[0]) }
	params['QT_DIR'] = env["QT_DIR"]
	params['NAME'] = Path(source[0].name).stem
	command = command_template.format(**params)
	proc =  subprocess.Popen(command , shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE )
	out,err = proc.communicate()
	if err:
		print(out)
	return proc.returncode

moc = Builder( action = moc_builder, prefix = "${QTGEN}/moc_", suffix =".cpp", src_suffix=".h")
uic = Builder( action = ui_builder, prefix = "${QTGEN}/ui_", suffix =".h",src_suffix = ".ui")
rcc = Builder( action = rcc_builder, prefix = "${QTGEN}/qrc_",suffix =".cpp", src_suffix = ".qrc")

env = Environment( BUILDERS={"MyMoc": moc, "MyUic":uic, "MyRcc": rcc }, 
	QTGEN="build/qtgen/", 
	**configs)

generateNode = []

mocfiles = ["MainWindow","RainRenderingWindow"]
uicfiles = Glob("*.ui")
rccfiles = Glob("*.qrc")

for moc_file in mocfiles:
	target_node = env.MyMoc(moc_file)
	generateNode.append( target_node[0] )

for uic_file in uicfiles:
	env.MyUic(uic_file)


for rcc_file in rccfiles:
	target_node = env.MyRcc(rcc_file)
	generateNode.append( target_node[0] )




VariantDir("build",".", duplicate =0)
files = Glob("build/*.cpp") + generateNode

localIncs = ["${QTGEN}", "."]
qtIncs = [
"${QT_DIR}/include",
"${QT_DIR}/include/QtWidgets",
"${QT_DIR}/include/QtOpenGL",
"${QT_DIR}/include/QtGui",
"${QT_DIR}/include/QtCore",
]

env.Append(CPPPATH= qtIncs + localIncs )

env.Append(LIBPATH=[
"${QT_DIR}/lib",
])

env.Append(LIBS=[ "qtmaind",
"Qt5Cored",
"Qt5Guid",
"Qt5OpenGLd",
"opengl32",
"glu32",
"Qt5OpenGLExtensionsd",
"Qt5Widgetsd",
])

env.Append(CPPFLAGS="/EHsc")

env.Program("build/rain.exe",files)

mysrcs = []
for srcfile in files:
	mysrcs.append( str(srcfile) )
myincs = []
for incdir in qtIncs:
	for incfile in env.Glob(incdir+"/*"):
		myincs.append( str(incfile) )

mylocalincs = []
for incdir in localIncs:
	for incfile in env.Glob(incdir+"/*.h"):
		mylocalincs.append( str(incfile) )



env.MSVSProject("build/rain"+ env['MSVSPROJECTSUFFIX'], srcs = mysrcs, incs =mylocalincs, variant = "Release|x64")
